在 Java 中，数据类型分为两大类：
    基本数据类型 和 引用数据类型。
    enum 是 Java 中的一种特殊的数据类型，它属于 引用数据类型。
基本数据类型：直接存储数据值，包括 byte、short、int、long、float、double、char 和 boolean。
引用数据类型：通过引用访问数据，包括类、接口、数组和枚举。
枚举类型：enum 是一种特殊的引用数据类型，用于定义一组常量。
    （枚举类型本质上是一个类，继承自 java.lang.Enum。
      单例：每个枚举常量都是唯一的实例。
      可迭代：枚举类型可以通过 values() 方法获取所有常量的数组，因此可以进行迭代。
      可以重载方法:  枚举类型中定义抽象方法，并在每个枚举常量中提供具体实现）

Error:
    OutOfMemoryError
    StackOverFlowError
Exception:
    RuntimeException:
        NullPointerException
        ArrayIndexOutOfBoundsException
        StringIndexOutOfBoundsException
        IllegalArgumentException
        ClassCastException
        ArithmeticException
    CheckedException:
        FileNotFoundException
        IOException
        EOFException
        SQLException
        ClassNotFoundException
        InterruptedException

引用拷贝：创建一个指向对象的引用变量的拷贝。
对象拷贝：创建对象本身的一个副本。
    深拷贝和浅拷贝都是对象拷贝
        浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。
        Person implements Cloneable
        Person originalPerson = new Person("John", 25);
        浅拷贝：
        public Object clone() throws CloneNotSupportedException {
            Object object = super.clone();
            return object;
        }
        深拷贝：
        public Object clone() throws CloneNotSupportedException {
            // 改为深复制：
            Student student = (Student) super.clone();
            // 本来是浅复制，现在将Teacher对象复制一份并重新set进来
            student.setTeacher((Teacher) student.getTeacher().clone());
            return student;
        }

重载（Overloading）：
    定义：在同一类中，允许定义多个同名方法，但这些方法的参数列表必须不同。
    参数列表不同：参数的数量、类型或顺序不同。
    返回类型：可以相同，也可以不同。
    作用：增加方法的灵活性，允许使用相同的方法名处理不同的数据类型或数量的参数。
重写（Overriding）：
    定义：在子类中重新定义父类的方法，方法名、参数列表和返回类型必须完全相同。
    参数列表相同：方法名、参数列表和返回类型必须与父类中的方法完全一致。
    作用：允许子类提供特定的实现，覆盖父类的默认行为。

集合类存放于 Java.util 包中，主要由Collection和Map
Collection：Collection 是集合 List、Set、Queue 的最基本的接口
Map：是映射表的基础接口：HashMap,TreeMap,HashTable

特性	            Set	                                            List
元素是否可重复	    不允许重复元素	                                    允许元素重复
元素的顺序	    不保证（有序与否取决具体实现，                       有序（插入顺序保证，除非特别实现；索引可用）
                如HashSet无序，LinkedHashSet有序，TreeSet是排序）	访问方式	主要通过元素本身查找，不通过索引	通过索引访问元素（如list.get(i)）
典型实现类	    HashSet、LinkedHashSet、TreeSet	                ArrayList、LinkedList

Java中的四种内部类(https://zhuanlan.zhihu.com/p/97300729)
成员内部类
    成员内部类定义在一个类的内部,我们可以认为它是外部类的一个成员变量。它可以无条件访问 : 成员内部类的所有成员属性和方法(包括私有和静态),
    需要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象。即默认情况下访问的是成员内部类的成员。
    如果要访问外部类的同名成员，需要以下面的形式进行访问：外部类.this.成员变量     外部类.this.成员方法
静态内部类
    静态内部类同成员内部类一样,也是定义在类里面的类, 只是在类的前面多了一个static关键字修饰:
    注意 : 静态内部类不能直接访问外部类的成员变量或者成员方法
        因为静态内部类,是不需要依赖于外部类的(参考: 静态变量不需要依赖类的对象)
局部内部类
   局部内部类是定义在一个方法,或者一个作用域里面的类。局部内部类类比成局部变量
匿名内部类
   它与局部类很相似，不同的是它没有类名，如果某个局部类你只需要用一次，那么你就可以使用匿名内部类
   匿名内部类包括以下部分:
       1. 操作符new
       2. 一个需要实现的接口或要继承的类, 本例是以实现接口为例,实现了InnerService接口
       3. 一对括号，如果是匿名子类，与实例化普通类的语法类似，如果有构造参数，要带上构造参数；如果是实现一个接口，只需要一对空括号即可；
       4. 一段被"{}"括起来类声明主体；
       5. 末尾的";"号（因为匿名类的声明是一个表达式，是语句的一部分，因此要以分号结尾）。
    匿名内部类（Anonymous Inner Class）的特性之一是变量屏蔽（Variable Shadowing）。
    如果匿名内部类中定义了变量，而外部作用域（如方法或类的作用域）中也有同名的变量，那么在匿名内部类的作用域中，
    外部的同名变量会被匿名内部类的变量**“屏蔽”**，即无法直接访问外部的同名变量。可以通过 OuterClass.this.outerVariable 明确地访问外部类的成员变量。
原理
    (为什么需要 final 或 effectively final?)
    局部内部类本质上是一个普通类的实例，但它可以捕获外部方法的局部变量。为了实现这一点，Java 编译器会在局部内部类中生成一个隐藏的字段，用于存储捕获的变量的值。如果捕获的变量是可变的，那么在局部内部类中可能会出现以下问题：
        1.线程安全问题：不同线程可能同时修改捕获的变量，导致数据不一致。
        2.不可预测性：局部内部类无法保证捕获的变量在外部不会被修改，从而导致运行时行为不可预测。
    为了避免这些问题，Java 规定捕获的变量必须是不可变的（final 或 effectively final）。
总结
    局部内部类、匿名内部类和 Lambda 表达式 都有类似的规则：捕获的外部变量必须是 final 或 effectively final。
        final 变量：确保变量的值在初始化后不能被修改，从而保证线程安全。
        effectively final 变量：虽然没有显式声明为 final，但在实际使用中没有被修改的变量。
    原因：为了避免线程安全问题和行为不可预测性，确保捕获的变量在内部类或表达式中是不可变的。
    最佳实践：在设计局部内部类时，尽量使用 final 或 effectively final 的变量，以确保代码的线程安全性和可维护性。

java switch case中的Switch支持哪些java类型
    1.基本类型
        int：整数类型。
        char：字符类型。
        byte：字节类型。
        short：短整数类型。
    2. 包装类
        Integer：int 的包装类。
        Character：char 的包装类。
        Byte：byte 的包装类。
        Short：short 的包装类。
    3. 枚举类型
        enum：枚举类型。(Java 5 )
    4. 字符串类型（Java 7 及以上版本）
        String：字符串类型。
    5. 其他类型(https://cloud.tencent.com/developer/article/1650819)
        从 Java 12 开始(预览)，switch 语句支持任意类型，但需要使用 switch 表达式（switch-expressions）。

switch原理：
    switch语句中的 case 分支条件值比较稀疏时，tableswitch指令的空间使用率偏低，这种情况下可能使用lookupswitch 指令
        执行switch时分支条件值比较稀疏时，使用tableswitch指令，会生成一张跳转表，表项数为（最大case值-最小case值＋1），
        跳转表是一个数组，数组是一段连续的内存，数组中包含了case个表项（数组索引对应值），每个都是指向对应代码块的指针。
        lookupswitch 和 tableswitch
        tableswitch 使用数组数据结构，通过下标可直接定位到跳转目标行
        lookupswitch 维护了一个key-value的关系，通过逐个比较索引来查找匹配的待跳转的行数
        tableswitch 比 lookupswitch 查找性能更佳
    switch 作用在枚举上实际使用了枚举的 ordinal 方法返回值作为比较的依据
    switch 作用在字符串上时使用字符串的 hashcode 作为比较的依据，hashcode 相同时进一步使用 equals 比较字符串内容

根据java虚拟机规范，java虚拟机的 tableswitch 和 lookupswitch 指令都只能支持int类型的条件值，所以 switch 不支持 long 长整型
JDK17开始，引入模式匹配，绕过了这一限制，允许 switch 表达式处理任意类型的变量(在 switch 条件下传递对象，并且可以在 switch case 标签中检查该对象的不同类型。)
在JDK 21中，Switch模式匹配采用了一种新的语法结构，允许开发者在switch语句中使用类型检查和模式匹配。
新的语法结构使用switch关键字开始，后跟要匹配的表达式。然后，每个case分支使用箭头(->)分隔匹配模式和要执行的代码块。如果没有匹配到任何模式，可以使用default分支作为备选。

