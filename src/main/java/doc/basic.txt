Error:
    OutOfMemoryError
    StackOverFlowError
Exception:
    RuntimeException:
        NullPointerException
        ArrayIndexOutOfBoundsException
        StringIndexOutOfBoundsException
        IllegalArgumentException
        ClassCastException
        ArithmeticException
    CheckedException:
        FileNotFoundException
        IOException
        EOFException
        SQLException
        ClassNotFoundException
        InterruptedException

引用拷贝：创建一个指向对象的引用变量的拷贝。
对象拷贝：创建对象本身的一个副本。
    深拷贝和浅拷贝都是对象拷贝
        浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。
        Person implements Cloneable
        Person originalPerson = new Person("John", 25);
        浅拷贝：
        public Object clone() throws CloneNotSupportedException {
            Object object = super.clone();
            return object;
        }
        深拷贝：
        public Object clone() throws CloneNotSupportedException {
            // 改为深复制：
            Student student = (Student) super.clone();
            // 本来是浅复制，现在将Teacher对象复制一份并重新set进来
            student.setTeacher((Teacher) student.getTeacher().clone());
            return student;
        }

重载（Overloading）：
    定义：在同一类中，允许定义多个同名方法，但这些方法的参数列表必须不同。
    参数列表不同：参数的数量、类型或顺序不同。
    返回类型：可以相同，也可以不同。
    作用：增加方法的灵活性，允许使用相同的方法名处理不同的数据类型或数量的参数。
重写（Overriding）：
    定义：在子类中重新定义父类的方法，方法名、参数列表和返回类型必须完全相同。
    参数列表相同：方法名、参数列表和返回类型必须与父类中的方法完全一致。
    作用：允许子类提供特定的实现，覆盖父类的默认行为。

集合类存放于 Java.util 包中，主要由Collection和Map
Collection：Collection 是集合 List、Set、Queue 的最基本的接口
Map：是映射表的基础接口：HashMap,TreeMap,HashTable

特性	            Set	                                            List
元素是否可重复	    不允许重复元素	                                    允许元素重复
元素的顺序	    不保证（有序与否取决具体实现，                       有序（插入顺序保证，除非特别实现；索引可用）
                如HashSet无序，LinkedHashSet有序，TreeSet是排序）	访问方式	主要通过元素本身查找，不通过索引	通过索引访问元素（如list.get(i)）
典型实现类	    HashSet、LinkedHashSet、TreeSet	                ArrayList、LinkedList

Java中的四种内部类(https://zhuanlan.zhihu.com/p/97300729)
成员内部类
    成员内部类定义在一个类的内部,我们可以认为它是外部类的一个成员变量。它可以无条件访问 : 成员内部类的所有成员属性和方法(包括私有和静态),
    需要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象。即默认情况下访问的是成员内部类的成员。
    如果要访问外部类的同名成员，需要以下面的形式进行访问：外部类.this.成员变量     外部类.this.成员方法
静态内部类
    静态内部类同成员内部类一样,也是定义在类里面的类, 只是在类的前面多了一个static关键字修饰:
    注意 : 静态内部类不能直接访问外部类的成员变量或者成员方法
        因为静态内部类,是不需要依赖于外部类的(参考: 静态变量不需要依赖类的对象)
局部内部类
   局部内部类是定义在一个方法,或者一个作用域里面的类。局部内部类类比成局部变量
匿名内部类
   它与局部类很相似，不同的是它没有类名，如果某个局部类你只需要用一次，那么你就可以使用匿名内部类
   匿名内部类包括以下部分:
       1. 操作符new
       2. 一个需要实现的接口或要继承的类, 本例是以实现接口为例,实现了InnerService接口
       3. 一对括号，如果是匿名子类，与实例化普通类的语法类似，如果有构造参数，要带上构造参数；如果是实现一个接口，只需要一对空括号即可；
       4. 一段被"{}"括起来类声明主体；
       5. 末尾的";"号（因为匿名类的声明是一个表达式，是语句的一部分，因此要以分号结尾）。
    匿名内部类（Anonymous Inner Class）的特性之一是变量屏蔽（Variable Shadowing）。
    如果匿名内部类中定义了变量，而外部作用域（如方法或类的作用域）中也有同名的变量，那么在匿名内部类的作用域中，
    外部的同名变量会被匿名内部类的变量**“屏蔽”**，即无法直接访问外部的同名变量。可以通过 OuterClass.this.outerVariable 明确地访问外部类的成员变量。
原理
    (为什么需要 final 或 effectively final?)
    局部内部类本质上是一个普通类的实例，但它可以捕获外部方法的局部变量。为了实现这一点，Java 编译器会在局部内部类中生成一个隐藏的字段，用于存储捕获的变量的值。如果捕获的变量是可变的，那么在局部内部类中可能会出现以下问题：
        1.线程安全问题：不同线程可能同时修改捕获的变量，导致数据不一致。
        2.不可预测性：局部内部类无法保证捕获的变量在外部不会被修改，从而导致运行时行为不可预测。
    为了避免这些问题，Java 规定捕获的变量必须是不可变的（final 或 effectively final）。
总结
    局部内部类、匿名内部类和 Lambda 表达式 都有类似的规则：捕获的外部变量必须是 final 或 effectively final。
    原因：为了避免线程安全问题和行为不可预测性，确保捕获的变量在内部类或表达式中是不可变的。
    最佳实践：在设计局部内部类时，尽量使用 final 或 effectively final 的变量，以确保代码的线程安全性和可维护性。


