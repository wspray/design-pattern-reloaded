Java垃圾回收（GC）机制详解：https://www.cnblogs.com/xiaoxi/p/6486852.html

可达性分析法
这个算法的基本思想是通过一系列称为“GC Roots”的对象作为起始点，从这些节点向下搜索，搜索所走过的路径称为引用链，
当一个对象到GC Roots没有任何引用链（即GC Roots到对象不可达）时，则证明此对象是不可用的。
可以作为GCRoots的对象包括下面几种：
(1). 虚拟机栈（栈帧中的局部变量区，也叫做局部变量表）中引用的对象。
    void runningMethod() {
        Object localObj = new Object();  // GC Root (局部变量)
        String param = "param";          // GC Root (参数)
    }
(2). 方法区中的 静态变量引用的对象。Static Variables
        static Object staticObj = new Object(); // GC Root
        static List<String> cache = new ArrayList<>(); // GC Root
(3). 方法区中的 常量池中的对象（Run-Time Constant Pool）
        static final String NAME = "Java"; // "Java" 字符串是 GC Root
        static final Object EMPTY = new Object(); //  GC Root
(4). 本地方法栈中JNI(Native方法)引用的对象。 // C++ 代码中创建的全局引用
(5). 存活线程对象（Live Threads）未终止的线程（Thread 实例）
(6). 同步锁对象（Monitor Locked Objects）避免锁回收后导致同步失效
        Object lock = new Object();
        synchronized(lock) { // lock 成为 GC Root
(7). JVM 系统对象，例如ClassLoader（JVM System Objects）
(8). ThreadLocal 的 Entry 对象
        线程存活时，其 ThreadLocalMap 中的 Entry 是 GC Root
(9). finalize() 队列中的对象
        等待执行 finalize() 的对象被 JVM 临时标记为根
(10). 类元数据对象
        Class 对象、方法字节码等（除非类被卸载）
(11). 内存映射缓冲区（MappedByteBuffer）
        被操作系统页面缓存引用的缓冲区

排查内存泄漏的关键点
    当发生内存泄漏时，通过 堆转储（Heap Dump） 分析：
    1.使用 MAT（Memory Analyzer Tool） 或 VisualVM
    2.查找 GC Roots 引用链 → 定位非预期存活的根对象
    3.重点关注：
        静态集合类（如 static Map）
        未关闭的线程池
        未清理的 ThreadLocal
        缓存未设置过期策略
    📌 示例：static Map<UserId, User> cache = new HashMap<>() 会导致所有 User 对象无法回收，直到类卸载。

判断对象是否可以被回收只有一个条件：对象的外部不存在任何强引用持有。（GC ROOT是否可达）
这里面试官一般就会问你 是否知道几种引用类型，要能回答强弱软虚四种及其含义：
    引用类型	    GC 回收条件	            是否影响 GC	    典型应用场景      特点                                             回收条件补充报告
    强引用	    从不回收（除非无引用链）	❌ 不干扰	    日常对象创建      只要存在强引用链，GC 永不回收对象。                   对象到 GC Roots 无任何强引用路径
    软引用	    内存不足时回收	            ✅ 辅助	        内存敏感缓存      内存充足时保留对象，内存不足时（OOM 前）自动回收        内存不足 && 无强引用
    弱引用	    下次 GC 必回收	        ✅ 辅助	        临时缓存、监听器   无论内存是否充足，下次 GC 必回收,比软引用更短的生命周期  无强引用 → 下次 GC 立即回收
    虚引用	    对象回收时收到通知	        ✅ 辅助	        精准内存回收跟踪   最弱的引用，无法通过它获取对象（get() 永远返回 null）  无强/软/弱引用 → GC 回收后通知队列
1.byte[] data = new byte[1024 * 1024]; // 只要存在强引用链，GC 永不回收对象
2.Map<String, SoftReference<Bitmap>> imageCache = new HashMap<>();
// 读取缓存
Bitmap bitmap = imageCache.get(key).get();
if (bitmap == null) {
    bitmap = loadFromDisk(key); // 重新加载
    imageCache.put(key, new SoftReference<>(bitmap));
}
3.Map<Key, Value> cache = new WeakHashMap<>();（键弱引用）
ThreadLocal 防内存泄漏
    static class ThreadLocalMap {
        static class Entry extends WeakReference<ThreadLocal<?>> {
            Object value;
        }
    }
4.ReferenceQueue<Object> queue = new ReferenceQueue<>();
PhantomReference<Object> phantomRef = new PhantomReference<>(new Object(), queue);//虚引用


当 ThreadLocal 导致内存泄漏时，其 GC Root 链通常是这样的：
Thread Ref -> Thread -> ThreadLocalMap -> Entry -> value
1.ThreadLocalMap 的生命周期与线程的生命周期一致。如果线程不结束，ThreadLocalMap 就会一直存在。
2.当 ThreadLocal 的实例被垃圾回收时（由于没有外部强引用），其对应的 key 在 Entry 中会变成 null。而 value 由于是强引用，仍然被 ThreadLocalMap 持有。
3.如果线程一直不结束，这些 value 就会一直存在，无法被垃圾回收器回收，从而导致内存泄漏。



方法区的垃圾回收
方法区的垃圾回收主要回收两部分内容：1. 废弃常量。2. 无用的类。
如何判断无用的类呢（即可以被垃圾回收）？需要满足以下三个条件
1. 该类的所有实例都已经被回收，即Java堆中不存在该类的任何实例。
2. 加载该类的ClassLoader已经被回收。
3. 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。

线程状态：新建状态、就绪状态、运行状态、阻塞状态、死亡状态
1.New      新建了一个线程对象
2.Runnable 线程就绪，可运行，等待CPU使用权
3.Running  线程获取CPU,执行代码
4.Blocked  线程因为某种原因放弃CPU使用权，暂时停止运行
          等待阻塞(运行的线程调用wait方法，线程会释放占用的资源，进入等待队列，自身不能被唤醒，只能依靠其他线程调用notify/notifyAll才能被唤醒)
          同步阻塞(运行的线程在获取对象同步锁时，同步锁被其他线程占用，则进入同步队列阻塞等待)
          其他阻塞(运行的线程执行sleep超时等待或join等待其他线程或发出IO请求InputStrem.read()从文件或网络读取数据时，线程会阻塞，直到数据可用）
5.Dead/TERMINATED 线程执行完毕或异常退出

（1）为什么wait()必须在同步（Synchronized）方法/代码块中调用？
答：调用wait()就是释放锁，释放锁的前提是必须要先获得锁，先获得锁才能释放锁。
（2）为什么notify(),notifyAll()必须在同步（Synchronized）方法/代码块中调用？
答：notify(),notifyAll()是将锁交给含有wait()方法的线程，让其继续执行下去（本质是让处于入口队列的线程竞争锁）
这是因为调用这三个方法之前必须拿要到当前锁对象的监视器monitor对象，也就是说notify/notifyAll和wait方法依赖于monitor对象，
又因为monitor存在于对象头的Mark Word中(存储monitor引用指针)，
而synchronized关键字可以获取monitor ，所以，notify/notifyAll和wait方法必须在
synchronized代码块或者synchronized方法中调用。

hotspot是顺序唤醒的LIFO!! 这是个重点! 有疑惑的百度: notify()是随机唤醒线程么?)
调用notify()或者notifyAll()时，并不会真正释放对象锁，必须等到synchronized方法或者语法块执行完才真正释放锁

线程中断的作用：
           线程中断可以使一个线程从等待状态变成就绪状态，
           如果中断的线程正处于运行状态，那么这个中断是不会用任何作用的（表面上不会影响正在运行的线程），线程恢复到就绪状态后，可以继续执行逻辑代码，
           如果出于等待状态，（使用中断起作用）想要让一个线程从等待状态中恢复过来有三种发送：一.等待超时，二.得到一个通知，三.使用中断
线程中断的原理：
         Thread.interrupt()方法仅仅是在当前线程中打了一个停止的标识将中断标志修改为true，并没有真正的停止线程。
         如果在此基础上进入堵塞状态（sleep(),wait(),join()）,马上就会抛出一个InterruptedException，且中断标志被清除，重新设置为false。

对于非阻塞中的线程, 只是改变了中断状态, 即Thread.isInterrupted()将返回true;
对于可取消的阻塞状态中的线程, 比如等待在这些函数上的线程, Thread.sleep(), Object.wait(), Thread.join(),
这个线程收到中断信号后, 会抛出InterruptedException, 同时会把中断状态置回为false.但调用Thread.interrupted()会对中断状态进行复位。

响应中断的方法和不响应中断的方法：
     响应中断的方法： 线程进入等待或是超时等待的状态后，调用interrupt方法都是会响应中断的，所以响应中断的方法：
            Object.wait()、Thread.join、Thread.sleep、LockSupport.park的有参和无参方法。
     不响应中断的方法：线程进入阻塞状态后，是不响应中断的，等待进入synchronized的方法或是代码块，都是会被阻塞的，此时不会响应中断，
     另外还有一个不响应中断的，那就是阻塞在ReentrantLock.lock方法里面的线程，也是不响应中断的，如果想要响应中断，可以使用ReentrantLock.lockInterruptibly方法。

线程中断后为什么要调用interrupt()?
    为了继续传递中断信号,遵循协作式中断规范。中断是将阻塞的线程打上中断标志修改为true，当wait()方法被中断后会抛出InterruptedException, 同时会把中断状态置回为false
    此时避免“吞掉”中断信号,线程需主动检查状态或处理异常来响应中断。
    private void innerMethod() throws InterruptedException {
     try {
         Thread.sleep(1000);
     } catch (InterruptedException e) {
         // 恢复中断状态，并抛出异常供上层处理
         Thread.currentThread().interrupt();
         throw e;
     }
 }
thread.interrupt()	    主动请求中断线程（需配合响应逻辑）。
Thread.interrupted()	静态检查当前线程中断状态，并清除状态（适合单次检查后不再需要状态的场景）。
thread.isInterrupted()	检查目标线程的中断状态，不修改状态（适合循环检查或需要保留状态的场景）。

sleep和wait区别：（sleep是Thread的方法，可以在任意地方执行；而wait是Object对象的方法，必须在synchronized代码块中执行。）
1.sleep是Thread类的静态方法，wait是Object类的本地方法，依赖synchronized关键字
2.sleep不会释放锁，wait释放锁并进入等待队列，需要notify唤醒（sleep会让出CPU执行时间，把执行权释放出去，不再运行此线程，当定时时间结束后再取回cpu资源）
3.sleep一般用于当前线程休眠，wait用于多线程通信

yield()执行后线程直接进入就绪状态，马上释放CPU资源，但是保留了cpu执行资格，有可能再此获取到执行权（本意是让其他线程执行）
join()执行后进入阻塞状态，B线程调用A线程的join()方法，B进入阻塞队列，等待A结束或中断，B再继续执行


虚假唤醒（Spurious Wakeup）：
    有时线程可能会在没有被通知、中断或超时的情况下醒来，这就是为什么等待条件应该总是在循环中检查。
    考虑使用Java 5+的java.util.concurrent包中的高级同步工具（如Lock、Condition等）替代wait/notify机制

当执行wait()方法，锁自动被释放；
但执行完notify()方法后，锁不会释放，而是要执行notify()方法所在的synchronized代码块后才会释放。
这一点很重要，也是很多工程师容易忽略的地方。

需要注意的是，在等待方执行的逻辑中，一定要用while循环来判断等待条件，因为执行notify/notifyAll方法时只是让等待线程从wait方法返回，而非重新进入临界区

------------------------------------------------------------------------------------------------------------------------------------
ThreadPoolExecutor 在提交一个新任务（execute(Runnable command) 方法）时内部执行的三步决策流程，核心目标是高效且安全地分配任务
第一步：尝试创建核心线程执行任务
第二步：尝试将任务加入队列
第三步：尝试创建非核心线程执行任务
流程总结
    条件	                动作      	                                  失败处理
1	工作线程 < 核心线程数	创建核心线程执行任务                             进入步骤2
2	任务成功入队	        二次检查状态(池已关闭?)                          移除任务并拒绝
                        和线程数(池仍运行但无工作线程 (workerCount == 0))  创建非核心线程(这是一种特殊情况:allowCoreThreadTimeOut=true，设置了核心线程空闲超时后退出)
3	队列已满	            创建非核心线程执行任务	                          拒绝任务

关键设计思想
资源分级利用：优先用核心线程 > 队列缓冲 > 非核心线程，避免过度创建线程。
状态安全：通过原子操作 (addWorker) 和二次检查确保线程池状态一致性。
健壮性：处理瞬时状态变化（如线程死亡、池突然关闭）。
keepAliveTime 是 Java 线程池（ThreadPoolExecutor）中一个关键的性能调优参数，它决定了 非核心线程空闲时的存活时间（没有新任务加入到worker）。

函数中创建的线程池会被GC回收吗？
GC Root: Thread（通过 ThreadFactory 创建）   ->  Worker  ->  线程池ThreadPoolExecutor
创建的任务会在线程池中new Worker(),
    1.它是一个线程池的内部类,持有线程池对象的引用,
    2.Worker 线程阻塞在 getTask() 等待新任务（如 workQueue.take()），线程不会退出。
 调用 shutdown() 后
回收流程：
    1.中断空闲线程：
        shutdown() 会中断所有阻塞在 getTask() 的 Worker 线程（通过 Thread.interrupt()）。
    2.Worker 线程退出：
        被中断的 Worker 会跳出循环，执行 processWorkerExit() 清理资源。
    3.断开引用链：
        Worker 线程结束运行，不再是 GC Root。
        Worker 对象被移出线程池的 workers 集合（HashSet<Worker>）。
        Worker 对线程池的引用断开。
------------------------------------------------------------------------------------------------------------------------------------
在Java中，堆（Heap）和栈（Stack）是两种非常重要的内存区域
1. 栈（Stack）
栈是线程私有的内存区域，每个线程在创建时都会分配一个栈。栈用于存储线程的局部变量、方法调用的上下文信息（如方法的参数、局部变量、返回地址等）以及部分结果。
主要特点：
    线程私有：每个线程都有自己的栈，线程之间不能共享栈内存。
    生命周期：栈的生命周期与线程的生命周期相同。线程启动时创建栈，线程结束时栈被销毁。
存储内容：
    局部变量（包括基本数据类型和对象引用）。
    方法调用的上下文信息（如方法的参数、局部变量、返回地址等）。
内存分配：栈内存由JVM自动分配和管理，通常是一个固定大小的区域。
内存溢出：如果线程的栈空间不足（例如，递归调用过深），会抛出StackOverflowError。

2. 堆（Heap）
堆是所有线程共享的内存区域，用于存储对象实例和数组。堆是Java内存模型（JMM）的核心部分，也是垃圾回收（Garbage Collection, GC）的主要区域。
主要特点：
    线程共享：堆是所有线程共享的内存区域，线程之间可以共享堆中的对象。
    生命周期：堆的生命周期与JVM的生命周期相同。JVM启动时创建堆，JVM结束时堆被销毁。
存储内容：
    所有通过new关键字创建的对象实例。
    所有数组。
内存分配：堆内存由JVM自动分配和管理，通常是一个动态分配的区域。
内存溢出：如果堆空间不足，会抛出OutOfMemoryError。
垃圾回收：堆是垃圾回收的主要区域，JVM会定期回收不再使用的对象，释放内存。
