https://www.yuque.com/rcode/sm24b4/csllse?#eESVC

MyBatis实现一对一，一对多有几种方式，怎么操作的？
    有联合查询和嵌套查询。
    嵌套结果 (Nested Results / Join) 几个表联合查询，只查询一次，通过在resultMap里面的association，collection节点配置一对一，一对多的类就可以完成
    嵌套查询 (Nested Select)是先查一个表，根据这个表里面的结果的外键id，去再另外一个表里面查询数据，也是通过配置association，collection，但另外一个表的查询通过select节点配置。

Mybatis延迟加载
    嵌套查询的时候按需加载
    延迟加载 lazyLoadingEnable 的开关设置成 true
    还需要将积极加载修改为消极加载，也就是将 aggressiveLazyLoading 改为 false
    <settings>
        <setting name="lazyLoadingEnabled" value="true"/>
         <setting name="aggressiveLazyLoading" value="false"></setting>
    </settings>
    在调用a.getB()的时候会执行select查询并setB()

Mybatis缓存机制
    缓存机制减轻数据库压力，提高数据库性能
    mybatis的缓存分为两级：一级缓存、二级缓存
    （1）一级缓存：一级缓存为 sqlsesson 缓存，缓存的数据只在 SqlSession 内有效。
    在操作数据库的时候需要先创建 SqlSession 会话对象，在对象中有一个 HashMap 用于存储缓存数据，此 HashMap 是当前会话对象私有的，别的 SqlSession 会话对象无法访问。
    （2）二级缓存：
    二级缓存是 mapper (Namespace)  级别的缓存，也就是同一个 namespace 的 mapper.xml ，当多个 SqlSession 使用同一个 Mapper 操作数据库的时候，得到的数据会缓存在同一个二级缓存区域
    二级缓存默认是没有开启的。需要在 setting 全局参数中配置开启二级缓存

    开启缓存：
    1、配置全局变量开启二级缓存
    <settings>
        <setting name="cacheEnabled" value="true"/>默认是false：关闭二级缓存
    <settings>
    2、在userMapper.xml 中配置
    当前mapper下所有语句开启二级缓存
    这里配置了一个 LRU 缓存，并每隔60秒刷新，最大存储512个对象，而返回的对象是只读的
    <select id="getCountByName" parameterType="java.util.Map" resultType="INTEGER" statementType="CALLABLE" useCache="true">

    具体流程：
    1.当一个sqlsession执行了一次select后，在关闭此session的时候，会将查询结果缓存到二级缓存
    2.当另一个sqlsession执行select时，首先会在他自己的一级缓存中找，如果没找到，就回去二级缓存中找，找到了就返回，就不用去数据库了，从而减少了数据库压力提高了性能
    注意:
    1、如果SqlSession执行了DML操作（insert、update、delete），并commit了，那么mybatis就会清空当前mapper缓存中的所有缓存数据，这样可以保证缓存中的存的数据永远和数据库中一致，避免出现差异
    2、mybatis的缓存是基于[namespace:sql语句:参数]来进行缓存的，意思就是，SqlSession的HashMap存储缓存数据时，是使用[namespace:sql:参数]作为key，查询返回的语句作为value保存的。

Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？
    Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能
    Mybatis提供了9种动态sql标签
        trim|where|set|foreach|if|choose|when|otherwise|bind。
    其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。


Mybatis都有哪些Executor执行器？它们之间的区别是什么？
    基本执行器BaseExecutor
        SimpleExecutor是最简单的执行器，根据对应的sql直接执行即可，不会做一些额外的操作；
        BatchExecutor执行器，顾名思义，通过批量操作来优化性能。通常需要注意的是批量更新操作，由于内部有缓存的实现，使用完成后记得调用flushStatements来清除缓存。
        ReuseExecutor 可重用的执行器，重用的对象是Statement，也就是说该执行器会缓存同一个sql的Statement，省去Statement的重新创建，优化性能。内部的实现是通过一个HashMap来维护Statement对象的。由于当前Map只在该session中有效，所以使用完成后记得调用flushStatements来清除Map。
        配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。
    缓存执行器CachingExecutor，装饰器模式对某个BaseExecutor的封装

MyBatis的工作原理
    SqlMapConfig.xml，此文件作为MyBatis的全局配置文件，配置了mybatis的运行环境等信息。Mapper.xml文件即SQL映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。
    通过MyBatis环境等配置信息构造SqlSessionFactory即会话工厂
    由会话工厂创建SqlSession即会话，操作数据库需要通过SqlSession进行。
    Mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器BaseExecutor、一个是缓存执行器CachingExecutor。
    Mapped Statement也是MyBatis一个底层封装对象，它包装了MyBatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。
    Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对PreparedStatement设置参数。
    Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、Pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至Java对象中，输出结果映射过程相当于Jdbc编程中对结果的解析处理过程。

MyBatis编程步骤
    （1）获取SqlSessionFactory对象
    解析文件的每一个信息保存在Configuration中，返回包含Configuration的DefaultSqlSession；
    注意：【MappedStatement】：代表一个增删改查的详细信息
    （2）获取SqlSession对象
    返回一个DefaultSqlSession对象，包含Executor和Configuration；
    这一步会创建Executor；
    （3）获取接口的代理对象（MapperProxy）
    getMapper，使用MapperProxyFactory创建一个MapperProxy的代理对象，代理对象里包含了DefaultSqlSession（Executor）
    （4）执行增删改查方法
    （5）关闭会话

为什么需要预编译
    JDBC 中使用对象 PreparedStatement 来抽象预编译语句，使用预编译。预编译阶段可以优化 SQL 的执行。
    预编译之后的 SQL 多数情况下可以直接执行，DBMS 不需要再次编译，越复杂的SQL，编译的复杂度将越大，预编译阶段可以合并多次操作为一个操作。同时预编译语句对象可以重复利用。
    把一个 SQL 预编译后产生的 PreparedStatement 对象缓存下来，下次对于同一个SQL，可以直接使用这个缓存的 PreparedState 对象。Mybatis默认情况下，将对所有的 SQL 进行预编译。

#{}和${}参数占位符
    ● 使用#{}参数占位符时，占位符内容会被替换成“？”，然后通过PreparedStatement对象的setXXX()方法为参数占位符设置值；
        而${}参数占位符内容会被直接替换为参数值。
        使用#{}参数占位符能够有效避免SQL注入问题，所以我们可以优先考虑使用#{}占位符，当#{}参数占位符无法满足需求时，才考虑使用${}参数占位符。
    ● 使用#{}可以有效的防止SQL注入，提高系统安全性。原因在于：预编译机制。预编译完成之后，SQL的结构已经固定，即便用户输入非法参数，也不会对SQL的结构产生影响，从而避免了潜在的安全风险。
    ● 预编译是提前对SQL语句进行预编译，而其后注入的参数将不会再进行SQL编译。
    我们知道，SQL注入是发生在编译的过程中，因为恶意注入了某些特殊字符，最后被编译成了恶意的执行操作。而预编译机制则可以很好的防止SQL注入。

mybatis重要组件
    Mapper
        1. MyBatis中Mapper的配置分为两部分，分别为Mapper接口和Mapper SQL配置。
            MyBatis通过动态代理的方式创建Mapper接口的代理对象，MapperProxy类中定义了Mapper方法执行时的拦截逻辑，通过MapperProxyFactory创建代理实例，
            MyBatis启动时，会将MapperProxyFactory注册到Configuration对象中。
            另外，MyBatis通过MappedStatement类描述Mapper SQL配置信息，
            框架启动时，会解析Mapper SQL配置，将所有的MappedStatement对象注册到Configuration对象中。
        2. 通过Mapper代理对象调用Mapper接口中定义的方法时，会执行MapperProxy类中的拦截逻辑，
            将Mapper方法的调用转换为调用SqlSession提供的API方法。
            在SqlSession的API方法中通过Mapper的Id找到对应的MappedStatement对象，获取对应的SQL信息，
            通过StatementHandler操作JDBC的Statement对象完成与数据库的交互，然后通过ResultSetHandler处理结果集，将结果返回给调用者。
    SqlSession
        ● 它包含了所有执行语句、提交或回滚事务以及获取映射器实例的方法。
        ● SqlSession是MyBatis提供的面向用户的API，表示和数据库交互时的会话对象，用于完成数据库的增删改查功能。
            SqlSession是Executor组件的外观，目的是对外提供易于理解和使用的数据库操作接口。
    Executor（可扩展插件）
        ● Executor是MyBatis的SQL执行器，MyBatis中对数据库所有的增删改查操作都是由Executor组件完成的。
    StatementHandler（可扩展插件）
        ● StatementHandler组件封装了对JDBC Statement的操作，例如设置Statement对象的fetchSize属性、设置查询超时时间、调用JDBC Statement与数据库交互等。
        ● SimpleStatementHandler ：封装了JDBC的 Statement 对象
        ● PreparedStatementHandler：封装了JDBC的 PreparedStatement 对象 （可添加sql参数）
        ● CallableStatementHandler：封装了JDBC的 CallableStatement 对象
    ParameterHandler（可扩展插件）
        ● 当MyBatis框架使用的Statement类型为CallableStatement和PreparedStatement时，ParameterHandler用于为Statement对象参数占位符设置值。
    ResultSetHandler（可扩展插件）
        ● ResultSetHandler封装了对JDBC中的ResultSet对象操作，当执行SQL类型为SELECT语句时，ResultSetHandler用于将查询结果转换成Java对象。
        TypeHandler（自定义转化处理器）
        ● 处理JDBC类型与Java类型之间的转换
    Configuration
        用于描述MyBatis的主配置信息，其他组件需要获取配置信息时，直接通过Configuration对象获取。
        除此之外，MyBatis在应用启动时，将Mapper配置信息、类型别名、TypeHandler等注册到Configuration组件中，其他组件需要这些信息时，也可以从Configuration对象中获取。
    MappedStatement
        ● MappedStatement用于描述Mapper中的SQL配置信息，
        是对Mapper XML配置文件中<select|update|delete|insert>等标签或者@Select/@Update等注解配置信息的封装。

Mybatis的插件运行原理，以及如何编写一个插件。
    Mybatis仅可以编写针对
        ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件
        Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，
        具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。
    实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。
    举例：PageHelper

